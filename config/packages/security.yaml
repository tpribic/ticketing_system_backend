security:
    encoders:
        App\User\Infrastructure\Doctrine\Main\Entity\UserEntity:
            algorithm: auto

    role_hierarchy:
        ROLE_ADMIN: [ROLE_ADMIN, ROLE_EMPLOYEE, ROLE_CUSTOMER]
        ROLE_EMPLOYEE: [ROLE_EMPLOYEE, ROLE_CUSTOMER]
        ROLE_CUSTOMER: [ROLE_CUSTOMER, ROLE_USER]

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\User\Infrastructure\Doctrine\Main\Entity\UserEntity
                property: email
    firewalls:
#        dev:
#            pattern: ^/(_(profiler|wdt)|css|images|js)/
#            security: false
#        main:
#            anonymous: lazy
#            provider: app_user_provider

        login:
            pattern: ^/api/login
            stateless: true
            anonymous: true
            json_login:
                check_path: /api/login
                username_path: username
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/api
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        register:
            pattern: ^/register
            stateless: true
            anonymous: true

        test:
            pattern: ^/test
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

    access_control:
        - { path: '^/register', roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: '^/api/login', roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: '^/api/admin/',       roles: ROLE_ADMIN }
        - { path: '^/api/employee/', roles: ROLE_EMPLOYEE }
        - { path: '^/api/user/', roles: ROLE_CUSTOMER }
        - { path: '^/api',       roles: IS_AUTHENTICATED_FULLY }

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
#    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
